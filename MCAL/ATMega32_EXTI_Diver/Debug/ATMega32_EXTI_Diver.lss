
ATMega32_EXTI_Diver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000051a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  0000058e  2**0
                  ALLOC
  2 .stab         00000600  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000004ce  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_1>
   8:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_2>
   c:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 86 02 	call	0x50c	; 0x50c <main>
  74:	0c 94 8b 02 	jmp	0x516	; 0x516 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <EXI_Enable>:
static void (*INT2_Fptr) (void)=NULLPTR;

/************************************Enable/Disable functions***********************************/

void EXI_Enable(EX_InterruptSource_type Interrupt)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <EXI_Enable+0x6>
  82:	0f 92       	push	r0
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt)
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	28 2f       	mov	r18, r24
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	3b 83       	std	Y+3, r19	; 0x03
  92:	2a 83       	std	Y+2, r18	; 0x02
  94:	8a 81       	ldd	r24, Y+2	; 0x02
  96:	9b 81       	ldd	r25, Y+3	; 0x03
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	91 05       	cpc	r25, r1
  9c:	89 f0       	breq	.+34     	; 0xc0 <EXI_Enable+0x44>
  9e:	2a 81       	ldd	r18, Y+2	; 0x02
  a0:	3b 81       	ldd	r19, Y+3	; 0x03
  a2:	22 30       	cpi	r18, 0x02	; 2
  a4:	31 05       	cpc	r19, r1
  a6:	a1 f0       	breq	.+40     	; 0xd0 <EXI_Enable+0x54>
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	9b 81       	ldd	r25, Y+3	; 0x03
  ac:	00 97       	sbiw	r24, 0x00	; 0
  ae:	b9 f4       	brne	.+46     	; 0xde <EXI_Enable+0x62>
	{
		case EX_INT0:
		SET_BIT(GICR,INT0);
  b0:	ab e5       	ldi	r26, 0x5B	; 91
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	eb e5       	ldi	r30, 0x5B	; 91
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	8c 93       	st	X, r24
  be:	0f c0       	rjmp	.+30     	; 0xde <EXI_Enable+0x62>
		break;
		case EX_INT1:
		SET_BIT(GICR,INT1);
  c0:	ab e5       	ldi	r26, 0x5B	; 91
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	eb e5       	ldi	r30, 0x5B	; 91
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	8c 93       	st	X, r24
  ce:	07 c0       	rjmp	.+14     	; 0xde <EXI_Enable+0x62>
		break;
		case EX_INT2:
		SET_BIT(GICR,INT2);
  d0:	ab e5       	ldi	r26, 0x5B	; 91
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	eb e5       	ldi	r30, 0x5B	; 91
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8c 93       	st	X, r24
		break;
	}
}
  de:	0f 90       	pop	r0
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
  e4:	cf 91       	pop	r28
  e6:	df 91       	pop	r29
  e8:	08 95       	ret

000000ea <EXI_Disable>:

void EXI_Disable(EX_InterruptSource_type Interrupt)
{
  ea:	df 93       	push	r29
  ec:	cf 93       	push	r28
  ee:	00 d0       	rcall	.+0      	; 0xf0 <EXI_Disable+0x6>
  f0:	0f 92       	push	r0
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt)
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	28 2f       	mov	r18, r24
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	3b 83       	std	Y+3, r19	; 0x03
 100:	2a 83       	std	Y+2, r18	; 0x02
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	9b 81       	ldd	r25, Y+3	; 0x03
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	91 05       	cpc	r25, r1
 10a:	89 f0       	breq	.+34     	; 0x12e <EXI_Disable+0x44>
 10c:	2a 81       	ldd	r18, Y+2	; 0x02
 10e:	3b 81       	ldd	r19, Y+3	; 0x03
 110:	22 30       	cpi	r18, 0x02	; 2
 112:	31 05       	cpc	r19, r1
 114:	a1 f0       	breq	.+40     	; 0x13e <EXI_Disable+0x54>
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	9b 81       	ldd	r25, Y+3	; 0x03
 11a:	00 97       	sbiw	r24, 0x00	; 0
 11c:	b9 f4       	brne	.+46     	; 0x14c <EXI_Disable+0x62>
	{
		case EX_INT0:
		CLEAR_BIT(GICR,INT0);
 11e:	ab e5       	ldi	r26, 0x5B	; 91
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	eb e5       	ldi	r30, 0x5B	; 91
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	8f 7b       	andi	r24, 0xBF	; 191
 12a:	8c 93       	st	X, r24
 12c:	0f c0       	rjmp	.+30     	; 0x14c <EXI_Disable+0x62>
		break;
		case EX_INT1:
		CLEAR_BIT(GICR,INT1);
 12e:	ab e5       	ldi	r26, 0x5B	; 91
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	eb e5       	ldi	r30, 0x5B	; 91
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	8f 77       	andi	r24, 0x7F	; 127
 13a:	8c 93       	st	X, r24
 13c:	07 c0       	rjmp	.+14     	; 0x14c <EXI_Disable+0x62>
		break;
		case EX_INT2:
		CLEAR_BIT(GICR,INT2);
 13e:	ab e5       	ldi	r26, 0x5B	; 91
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	eb e5       	ldi	r30, 0x5B	; 91
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	8f 7d       	andi	r24, 0xDF	; 223
 14a:	8c 93       	st	X, r24
		break;
	}
}
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	cf 91       	pop	r28
 154:	df 91       	pop	r29
 156:	08 95       	ret

00000158 <EXI_TriggerEdge>:

/************************************Control function*****************************/

void EXI_TriggerEdge(EX_InterruptSource_type Interrupt,TriggerEdge_type Edge)
{
 158:	df 93       	push	r29
 15a:	cf 93       	push	r28
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
 160:	2a 97       	sbiw	r28, 0x0a	; 10
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	de bf       	out	0x3e, r29	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	cd bf       	out	0x3d, r28	; 61
 16c:	89 83       	std	Y+1, r24	; 0x01
 16e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt)
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	28 2f       	mov	r18, r24
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	3a 87       	std	Y+10, r19	; 0x0a
 178:	29 87       	std	Y+9, r18	; 0x09
 17a:	89 85       	ldd	r24, Y+9	; 0x09
 17c:	9a 85       	ldd	r25, Y+10	; 0x0a
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 05       	cpc	r25, r1
 182:	09 f4       	brne	.+2      	; 0x186 <EXI_TriggerEdge+0x2e>
 184:	66 c0       	rjmp	.+204    	; 0x252 <EXI_TriggerEdge+0xfa>
 186:	29 85       	ldd	r18, Y+9	; 0x09
 188:	3a 85       	ldd	r19, Y+10	; 0x0a
 18a:	22 30       	cpi	r18, 0x02	; 2
 18c:	31 05       	cpc	r19, r1
 18e:	09 f4       	brne	.+2      	; 0x192 <EXI_TriggerEdge+0x3a>
 190:	bb c0       	rjmp	.+374    	; 0x308 <EXI_TriggerEdge+0x1b0>
 192:	89 85       	ldd	r24, Y+9	; 0x09
 194:	9a 85       	ldd	r25, Y+10	; 0x0a
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	09 f0       	breq	.+2      	; 0x19c <EXI_TriggerEdge+0x44>
 19a:	dd c0       	rjmp	.+442    	; 0x356 <EXI_TriggerEdge+0x1fe>
	{
		case EX_INT0:
		switch(Edge)
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	38 87       	std	Y+8, r19	; 0x08
 1a4:	2f 83       	std	Y+7, r18	; 0x07
 1a6:	8f 81       	ldd	r24, Y+7	; 0x07
 1a8:	98 85       	ldd	r25, Y+8	; 0x08
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	91 05       	cpc	r25, r1
 1ae:	21 f1       	breq	.+72     	; 0x1f8 <EXI_TriggerEdge+0xa0>
 1b0:	2f 81       	ldd	r18, Y+7	; 0x07
 1b2:	38 85       	ldd	r19, Y+8	; 0x08
 1b4:	22 30       	cpi	r18, 0x02	; 2
 1b6:	31 05       	cpc	r19, r1
 1b8:	2c f4       	brge	.+10     	; 0x1c4 <EXI_TriggerEdge+0x6c>
 1ba:	8f 81       	ldd	r24, Y+7	; 0x07
 1bc:	98 85       	ldd	r25, Y+8	; 0x08
 1be:	00 97       	sbiw	r24, 0x00	; 0
 1c0:	61 f0       	breq	.+24     	; 0x1da <EXI_TriggerEdge+0x82>
 1c2:	c9 c0       	rjmp	.+402    	; 0x356 <EXI_TriggerEdge+0x1fe>
 1c4:	2f 81       	ldd	r18, Y+7	; 0x07
 1c6:	38 85       	ldd	r19, Y+8	; 0x08
 1c8:	22 30       	cpi	r18, 0x02	; 2
 1ca:	31 05       	cpc	r19, r1
 1cc:	21 f1       	breq	.+72     	; 0x216 <EXI_TriggerEdge+0xbe>
 1ce:	8f 81       	ldd	r24, Y+7	; 0x07
 1d0:	98 85       	ldd	r25, Y+8	; 0x08
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	91 05       	cpc	r25, r1
 1d6:	71 f1       	breq	.+92     	; 0x234 <EXI_TriggerEdge+0xdc>
 1d8:	be c0       	rjmp	.+380    	; 0x356 <EXI_TriggerEdge+0x1fe>
		{
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC00);
 1da:	a5 e5       	ldi	r26, 0x55	; 85
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	e5 e5       	ldi	r30, 0x55	; 85
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8e 7f       	andi	r24, 0xFE	; 254
 1e6:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
 1e8:	a5 e5       	ldi	r26, 0x55	; 85
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	e5 e5       	ldi	r30, 0x55	; 85
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	8d 7f       	andi	r24, 0xFD	; 253
 1f4:	8c 93       	st	X, r24
 1f6:	af c0       	rjmp	.+350    	; 0x356 <EXI_TriggerEdge+0x1fe>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
 1f8:	a5 e5       	ldi	r26, 0x55	; 85
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e5 e5       	ldi	r30, 0x55	; 85
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	81 60       	ori	r24, 0x01	; 1
 204:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
 206:	a5 e5       	ldi	r26, 0x55	; 85
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	e5 e5       	ldi	r30, 0x55	; 85
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	8d 7f       	andi	r24, 0xFD	; 253
 212:	8c 93       	st	X, r24
 214:	a0 c0       	rjmp	.+320    	; 0x356 <EXI_TriggerEdge+0x1fe>
			break;
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC00);
 216:	a5 e5       	ldi	r26, 0x55	; 85
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e5 e5       	ldi	r30, 0x55	; 85
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	8e 7f       	andi	r24, 0xFE	; 254
 222:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
 224:	a5 e5       	ldi	r26, 0x55	; 85
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	e5 e5       	ldi	r30, 0x55	; 85
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	82 60       	ori	r24, 0x02	; 2
 230:	8c 93       	st	X, r24
 232:	91 c0       	rjmp	.+290    	; 0x356 <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
 234:	a5 e5       	ldi	r26, 0x55	; 85
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	e5 e5       	ldi	r30, 0x55	; 85
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	81 60       	ori	r24, 0x01	; 1
 240:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
 242:	a5 e5       	ldi	r26, 0x55	; 85
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e5 e5       	ldi	r30, 0x55	; 85
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	8c 93       	st	X, r24
 250:	82 c0       	rjmp	.+260    	; 0x356 <EXI_TriggerEdge+0x1fe>

		}
		break;

		case EX_INT1:
		switch(Edge)
 252:	8a 81       	ldd	r24, Y+2	; 0x02
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	3e 83       	std	Y+6, r19	; 0x06
 25a:	2d 83       	std	Y+5, r18	; 0x05
 25c:	8d 81       	ldd	r24, Y+5	; 0x05
 25e:	9e 81       	ldd	r25, Y+6	; 0x06
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	91 05       	cpc	r25, r1
 264:	21 f1       	breq	.+72     	; 0x2ae <EXI_TriggerEdge+0x156>
 266:	2d 81       	ldd	r18, Y+5	; 0x05
 268:	3e 81       	ldd	r19, Y+6	; 0x06
 26a:	22 30       	cpi	r18, 0x02	; 2
 26c:	31 05       	cpc	r19, r1
 26e:	2c f4       	brge	.+10     	; 0x27a <EXI_TriggerEdge+0x122>
 270:	8d 81       	ldd	r24, Y+5	; 0x05
 272:	9e 81       	ldd	r25, Y+6	; 0x06
 274:	00 97       	sbiw	r24, 0x00	; 0
 276:	61 f0       	breq	.+24     	; 0x290 <EXI_TriggerEdge+0x138>
 278:	6e c0       	rjmp	.+220    	; 0x356 <EXI_TriggerEdge+0x1fe>
 27a:	2d 81       	ldd	r18, Y+5	; 0x05
 27c:	3e 81       	ldd	r19, Y+6	; 0x06
 27e:	22 30       	cpi	r18, 0x02	; 2
 280:	31 05       	cpc	r19, r1
 282:	21 f1       	breq	.+72     	; 0x2cc <EXI_TriggerEdge+0x174>
 284:	8d 81       	ldd	r24, Y+5	; 0x05
 286:	9e 81       	ldd	r25, Y+6	; 0x06
 288:	83 30       	cpi	r24, 0x03	; 3
 28a:	91 05       	cpc	r25, r1
 28c:	71 f1       	breq	.+92     	; 0x2ea <EXI_TriggerEdge+0x192>
 28e:	63 c0       	rjmp	.+198    	; 0x356 <EXI_TriggerEdge+0x1fe>
		{
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC10);
 290:	a5 e5       	ldi	r26, 0x55	; 85
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	e5 e5       	ldi	r30, 0x55	; 85
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	8b 7f       	andi	r24, 0xFB	; 251
 29c:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
 29e:	a5 e5       	ldi	r26, 0x55	; 85
 2a0:	b0 e0       	ldi	r27, 0x00	; 0
 2a2:	e5 e5       	ldi	r30, 0x55	; 85
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	87 7f       	andi	r24, 0xF7	; 247
 2aa:	8c 93       	st	X, r24
 2ac:	54 c0       	rjmp	.+168    	; 0x356 <EXI_TriggerEdge+0x1fe>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC10);
 2ae:	a5 e5       	ldi	r26, 0x55	; 85
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	e5 e5       	ldi	r30, 0x55	; 85
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	84 60       	ori	r24, 0x04	; 4
 2ba:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
 2bc:	a5 e5       	ldi	r26, 0x55	; 85
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	e5 e5       	ldi	r30, 0x55	; 85
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	87 7f       	andi	r24, 0xF7	; 247
 2c8:	8c 93       	st	X, r24
 2ca:	45 c0       	rjmp	.+138    	; 0x356 <EXI_TriggerEdge+0x1fe>
			break;
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC10);
 2cc:	a5 e5       	ldi	r26, 0x55	; 85
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	e5 e5       	ldi	r30, 0x55	; 85
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	8b 7f       	andi	r24, 0xFB	; 251
 2d8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
 2da:	a5 e5       	ldi	r26, 0x55	; 85
 2dc:	b0 e0       	ldi	r27, 0x00	; 0
 2de:	e5 e5       	ldi	r30, 0x55	; 85
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	88 60       	ori	r24, 0x08	; 8
 2e6:	8c 93       	st	X, r24
 2e8:	36 c0       	rjmp	.+108    	; 0x356 <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
 2ea:	a5 e5       	ldi	r26, 0x55	; 85
 2ec:	b0 e0       	ldi	r27, 0x00	; 0
 2ee:	e5 e5       	ldi	r30, 0x55	; 85
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	84 60       	ori	r24, 0x04	; 4
 2f6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
 2f8:	a5 e5       	ldi	r26, 0x55	; 85
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	e5 e5       	ldi	r30, 0x55	; 85
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	88 60       	ori	r24, 0x08	; 8
 304:	8c 93       	st	X, r24
 306:	27 c0       	rjmp	.+78     	; 0x356 <EXI_TriggerEdge+0x1fe>

		}
		break;

		case EX_INT2:
		switch(Edge)
 308:	8a 81       	ldd	r24, Y+2	; 0x02
 30a:	28 2f       	mov	r18, r24
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	3c 83       	std	Y+4, r19	; 0x04
 310:	2b 83       	std	Y+3, r18	; 0x03
 312:	8b 81       	ldd	r24, Y+3	; 0x03
 314:	9c 81       	ldd	r25, Y+4	; 0x04
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	91 05       	cpc	r25, r1
 31a:	31 f0       	breq	.+12     	; 0x328 <EXI_TriggerEdge+0x1d0>
 31c:	2b 81       	ldd	r18, Y+3	; 0x03
 31e:	3c 81       	ldd	r19, Y+4	; 0x04
 320:	23 30       	cpi	r18, 0x03	; 3
 322:	31 05       	cpc	r19, r1
 324:	49 f0       	breq	.+18     	; 0x338 <EXI_TriggerEdge+0x1e0>
 326:	10 c0       	rjmp	.+32     	; 0x348 <EXI_TriggerEdge+0x1f0>
		{
			case FALLING_EDGE:
			CLEAR_BIT(MCUCSR,ISC2);
 328:	a4 e5       	ldi	r26, 0x54	; 84
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	e4 e5       	ldi	r30, 0x54	; 84
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	8f 7b       	andi	r24, 0xBF	; 191
 334:	8c 93       	st	X, r24
 336:	0f c0       	rjmp	.+30     	; 0x356 <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
 338:	a4 e5       	ldi	r26, 0x54	; 84
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	e4 e5       	ldi	r30, 0x54	; 84
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	80 64       	ori	r24, 0x40	; 64
 344:	8c 93       	st	X, r24
 346:	07 c0       	rjmp	.+14     	; 0x356 <EXI_TriggerEdge+0x1fe>
			break;
			default:
			CLEAR_BIT(MCUCSR,ISC2);
 348:	a4 e5       	ldi	r26, 0x54	; 84
 34a:	b0 e0       	ldi	r27, 0x00	; 0
 34c:	e4 e5       	ldi	r30, 0x54	; 84
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	8f 7b       	andi	r24, 0xBF	; 191
 354:	8c 93       	st	X, r24
		}
		break;
	}
}
 356:	2a 96       	adiw	r28, 0x0a	; 10
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	f8 94       	cli
 35c:	de bf       	out	0x3e, r29	; 62
 35e:	0f be       	out	0x3f, r0	; 63
 360:	cd bf       	out	0x3d, r28	; 61
 362:	cf 91       	pop	r28
 364:	df 91       	pop	r29
 366:	08 95       	ret

00000368 <__vector_1>:

/*******************************ISR********************************/
ISR(INT0_vect)
{
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	2f 93       	push	r18
 374:	3f 93       	push	r19
 376:	4f 93       	push	r20
 378:	5f 93       	push	r21
 37a:	6f 93       	push	r22
 37c:	7f 93       	push	r23
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	af 93       	push	r26
 384:	bf 93       	push	r27
 386:	ef 93       	push	r30
 388:	ff 93       	push	r31
 38a:	df 93       	push	r29
 38c:	cf 93       	push	r28
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
	if (INT0_Fptr!=NULLPTR)
 392:	80 91 60 00 	lds	r24, 0x0060
 396:	90 91 61 00 	lds	r25, 0x0061
 39a:	00 97       	sbiw	r24, 0x00	; 0
 39c:	29 f0       	breq	.+10     	; 0x3a8 <__vector_1+0x40>
	{
		INT0_Fptr();
 39e:	e0 91 60 00 	lds	r30, 0x0060
 3a2:	f0 91 61 00 	lds	r31, 0x0061
 3a6:	09 95       	icall
	}
}
 3a8:	cf 91       	pop	r28
 3aa:	df 91       	pop	r29
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <__vector_2>:
ISR(INT1_vect)
{
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	4f 93       	push	r20
 3de:	5f 93       	push	r21
 3e0:	6f 93       	push	r22
 3e2:	7f 93       	push	r23
 3e4:	8f 93       	push	r24
 3e6:	9f 93       	push	r25
 3e8:	af 93       	push	r26
 3ea:	bf 93       	push	r27
 3ec:	ef 93       	push	r30
 3ee:	ff 93       	push	r31
 3f0:	df 93       	push	r29
 3f2:	cf 93       	push	r28
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
	if (INT1_Fptr!=NULLPTR)
 3f8:	80 91 62 00 	lds	r24, 0x0062
 3fc:	90 91 63 00 	lds	r25, 0x0063
 400:	00 97       	sbiw	r24, 0x00	; 0
 402:	29 f0       	breq	.+10     	; 0x40e <__vector_2+0x40>
	{
		INT1_Fptr();
 404:	e0 91 62 00 	lds	r30, 0x0062
 408:	f0 91 63 00 	lds	r31, 0x0063
 40c:	09 95       	icall
	}
}
 40e:	cf 91       	pop	r28
 410:	df 91       	pop	r29
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <__vector_3>:
ISR(INT2_vect)
{
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	2f 93       	push	r18
 440:	3f 93       	push	r19
 442:	4f 93       	push	r20
 444:	5f 93       	push	r21
 446:	6f 93       	push	r22
 448:	7f 93       	push	r23
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
 44e:	af 93       	push	r26
 450:	bf 93       	push	r27
 452:	ef 93       	push	r30
 454:	ff 93       	push	r31
 456:	df 93       	push	r29
 458:	cf 93       	push	r28
 45a:	cd b7       	in	r28, 0x3d	; 61
 45c:	de b7       	in	r29, 0x3e	; 62
	if (INT2_Fptr!=NULLPTR)
 45e:	80 91 64 00 	lds	r24, 0x0064
 462:	90 91 65 00 	lds	r25, 0x0065
 466:	00 97       	sbiw	r24, 0x00	; 0
 468:	29 f0       	breq	.+10     	; 0x474 <__vector_3+0x40>
	{
		INT2_Fptr();
 46a:	e0 91 64 00 	lds	r30, 0x0064
 46e:	f0 91 65 00 	lds	r31, 0x0065
 472:	09 95       	icall
	}	
}
 474:	cf 91       	pop	r28
 476:	df 91       	pop	r29
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <EXI_SetCallBack>:

/************************************Call back functions*********************************************/
void EXI_SetCallBack(EX_InterruptSource_type Interrupt,void(*LocalPtr)(void))
{
 49a:	df 93       	push	r29
 49c:	cf 93       	push	r28
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <EXI_SetCallBack+0x6>
 4a0:	00 d0       	rcall	.+0      	; 0x4a2 <EXI_SetCallBack+0x8>
 4a2:	0f 92       	push	r0
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
 4a8:	89 83       	std	Y+1, r24	; 0x01
 4aa:	7b 83       	std	Y+3, r23	; 0x03
 4ac:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt)
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	28 2f       	mov	r18, r24
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	3d 83       	std	Y+5, r19	; 0x05
 4b6:	2c 83       	std	Y+4, r18	; 0x04
 4b8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ba:	9d 81       	ldd	r25, Y+5	; 0x05
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	91 05       	cpc	r25, r1
 4c0:	81 f0       	breq	.+32     	; 0x4e2 <EXI_SetCallBack+0x48>
 4c2:	2c 81       	ldd	r18, Y+4	; 0x04
 4c4:	3d 81       	ldd	r19, Y+5	; 0x05
 4c6:	22 30       	cpi	r18, 0x02	; 2
 4c8:	31 05       	cpc	r19, r1
 4ca:	91 f0       	breq	.+36     	; 0x4f0 <EXI_SetCallBack+0x56>
 4cc:	8c 81       	ldd	r24, Y+4	; 0x04
 4ce:	9d 81       	ldd	r25, Y+5	; 0x05
 4d0:	00 97       	sbiw	r24, 0x00	; 0
 4d2:	a1 f4       	brne	.+40     	; 0x4fc <EXI_SetCallBack+0x62>
	{
		case EX_INT0:
		INT0_Fptr=LocalPtr;
 4d4:	8a 81       	ldd	r24, Y+2	; 0x02
 4d6:	9b 81       	ldd	r25, Y+3	; 0x03
 4d8:	90 93 61 00 	sts	0x0061, r25
 4dc:	80 93 60 00 	sts	0x0060, r24
 4e0:	0d c0       	rjmp	.+26     	; 0x4fc <EXI_SetCallBack+0x62>
		break;
		case EX_INT1:
		INT1_Fptr=LocalPtr;
 4e2:	8a 81       	ldd	r24, Y+2	; 0x02
 4e4:	9b 81       	ldd	r25, Y+3	; 0x03
 4e6:	90 93 63 00 	sts	0x0063, r25
 4ea:	80 93 62 00 	sts	0x0062, r24
 4ee:	06 c0       	rjmp	.+12     	; 0x4fc <EXI_SetCallBack+0x62>
		break;
		case EX_INT2:
		INT2_Fptr=LocalPtr;
 4f0:	8a 81       	ldd	r24, Y+2	; 0x02
 4f2:	9b 81       	ldd	r25, Y+3	; 0x03
 4f4:	90 93 65 00 	sts	0x0065, r25
 4f8:	80 93 64 00 	sts	0x0064, r24
		break;
	}
}
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	0f 90       	pop	r0
 506:	cf 91       	pop	r28
 508:	df 91       	pop	r29
 50a:	08 95       	ret

0000050c <main>:
 *      Author: Youssef Samy
 */

#include "EXTI_interface.h"
void main(void)
{
 50c:	df 93       	push	r29
 50e:	cf 93       	push	r28
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
 514:	ff cf       	rjmp	.-2      	; 0x514 <main+0x8>

00000516 <_exit>:
 516:	f8 94       	cli

00000518 <__stop_program>:
 518:	ff cf       	rjmp	.-2      	; 0x518 <__stop_program>
